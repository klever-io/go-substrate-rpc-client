// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	chain "github.com/centrifuge/go-substrate-rpc-client/v4/rpc/chain"
	block "github.com/centrifuge/go-substrate-rpc-client/v4/types/block"

	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
)

// Chain is an autogenerated mock type for the Chain type
type Chain struct {
	mock.Mock
}

// GetBlock provides a mock function with given fields: ctx, blockHash
func (_m *Chain) GetBlock(ctx context.Context, blockHash types.Hash) (*block.SignedBlock, error) {
	ret := _m.Called(ctx, blockHash)

	var r0 *block.SignedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Hash) (*block.SignedBlock, error)); ok {
		return rf(ctx, blockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Hash) *block.SignedBlock); ok {
		r0 = rf(ctx, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.SignedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Hash) error); ok {
		r1 = rf(ctx, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHash provides a mock function with given fields: ctx, blockNumber
func (_m *Chain) GetBlockHash(ctx context.Context, blockNumber uint64) (types.Hash, error) {
	ret := _m.Called(ctx, blockNumber)

	var r0 types.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (types.Hash, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) types.Hash); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockHashLatest provides a mock function with given fields: ctx
func (_m *Chain) GetBlockHashLatest(ctx context.Context) (types.Hash, error) {
	ret := _m.Called(ctx)

	var r0 types.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Hash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Hash); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockLatest provides a mock function with given fields: ctx
func (_m *Chain) GetBlockLatest(ctx context.Context) (*block.SignedBlock, error) {
	ret := _m.Called(ctx)

	var r0 *block.SignedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*block.SignedBlock, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *block.SignedBlock); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*block.SignedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFinalizedHead provides a mock function with given fields: ctx
func (_m *Chain) GetFinalizedHead(ctx context.Context) (types.Hash, error) {
	ret := _m.Called(ctx)

	var r0 types.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Hash, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Hash); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeader provides a mock function with given fields: ctx, blockHash
func (_m *Chain) GetHeader(ctx context.Context, blockHash types.Hash) (*types.Header, error) {
	ret := _m.Called(ctx, blockHash)

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Hash) (*types.Header, error)); ok {
		return rf(ctx, blockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Hash) *types.Header); ok {
		r0 = rf(ctx, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Hash) error); ok {
		r1 = rf(ctx, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHeaderLatest provides a mock function with given fields: ctx
func (_m *Chain) GetHeaderLatest(ctx context.Context) (*types.Header, error) {
	ret := _m.Called(ctx)

	var r0 *types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*types.Header, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *types.Header); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeFinalizedHeads provides a mock function with given fields: ctx
func (_m *Chain) SubscribeFinalizedHeads(ctx context.Context) (*chain.FinalizedHeadsSubscription, error) {
	ret := _m.Called(ctx)

	var r0 *chain.FinalizedHeadsSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*chain.FinalizedHeadsSubscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *chain.FinalizedHeadsSubscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.FinalizedHeadsSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeNewHeads provides a mock function with given fields: ctx
func (_m *Chain) SubscribeNewHeads(ctx context.Context) (*chain.NewHeadsSubscription, error) {
	ret := _m.Called(ctx)

	var r0 *chain.NewHeadsSubscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*chain.NewHeadsSubscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *chain.NewHeadsSubscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chain.NewHeadsSubscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChain creates a new instance of Chain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chain {
	mock := &Chain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
